[{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"/fish/api/ClientRemoteProperty","content":"On this page ClientRemoteProperty This item only works when running on the client. Client Created via ClientComm:GetProperty().","keywords":""},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"/fish/api/RemoteProperty","content":"On this page RemoteProperty This item only works when running on the server. Server Created via ServerComm:CreateProperty(). Values set can be anything that can pass through aRemoteEvent. Here is a cheat-sheet for the below methods: Setting data Set: Set &quot;top&quot; value for all current and future players. Overrides any custom-set data per player. SetTop: Set the &quot;top&quot; value for all players, but does not override any custom-set data per player. SetFor: Set custom data for the given player. Overrides the &quot;top&quot; value. (Can be nil) SetForList: Same as SetFor, but accepts a list of players. SetFilter: Accepts a predicate function which checks for which players to set. Clearing data ClearFor: Clears the custom data set for a given player. Player will start using the &quot;top&quot; level value instead. ClearForList: Same as ClearFor, but accepts a list of players. ClearFilter: Accepts a predicate function which checks for which players to clear. Getting data Get: Retrieves the &quot;top&quot; value GetFor: Gets the current value for the given player. If cleared, returns the top value. Network Calling any of the data setter methods (e.g. Set()) will fire the underlying RemoteEvent to replicate data to the clients. Therefore, setting data should only occur when it is necessary to change the data that the clients receive. Tables Tables can be used with RemoteProperties. However, the RemoteProperty object will not watch for changes within the table. Therefore, anytime changes are made to the table, the data must be set again using one of the setter methods.","keywords":""},{"title":"Server","type":0,"sectionRef":"#","url":"/fish/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/fish/api/Server#functions","content":" "},{"title":"service​","type":1,"pageTitle":"Server","url":"/fish/api/Server#service","content":"&lt;/&gt; Server.service( name: string,-- The name of the service serviceDef: fish.ServiceDef&lt;T&gt;?-- The definition of the service ) → fish.Service&lt;T&gt;-- The service itself Constructs/gets a service. If the service already exists, the existing service will be returned.  "},{"title":"serviceDeep​","type":1,"pageTitle":"Server","url":"/fish/api/Server#serviceDeep","content":"&lt;/&gt; Server.serviceDeep( folder: Instance -- The instance containing the service modules ) → () Constructs all services out of the modules in the descendants in the given instance.  "},{"title":"signal​","type":1,"pageTitle":"Server","url":"/fish/api/Server#signal","content":"&lt;/&gt; Server.signal() → RemoteSignal Returns a marker that will transform into a RemoteSignal once all services are started.  "},{"title":"property​","type":1,"pageTitle":"Server","url":"/fish/api/Server#property","content":"&lt;/&gt; Server.property(initialValue: any) → RemoteProperty Returns a marker that will transform into a RemoteProperty once all services are started.  "},{"title":"start​","type":1,"pageTitle":"Server","url":"/fish/api/Server#start","content":"&lt;/&gt; Server.start() → Promise.TypedPromise&lt;nil&gt;-- Promise that resolves when started Starts all created services. Services cannot be created after called.  "},{"title":"onStart​","type":1,"pageTitle":"Server","url":"/fish/api/Server#onStart","content":"&lt;/&gt; Server.onStart() → Promise.TypedPromise&lt;nil&gt;-- Promise that resolves when started Returns a promise that is resolved once services are started. "},{"title":"Types","type":0,"sectionRef":"#","url":"/fish/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/fish/api/Types#types","content":" "},{"title":"self<C,S>​","type":1,"pageTitle":"Types","url":"/fish/api/Types#self<C,S>","content":"&lt;/&gt; type self&lt;C,S&gt; = C&amp;{ Player: Player , Server: S, [any]: any } Type used to describe the self object in Client functions function MyService.Client.PrintPlayer(self: fish.self&lt;client, server&gt;) print(self.Player) end   "},{"title":"ServiceDef<T>​","type":1,"pageTitle":"Types","url":"/fish/api/Types#ServiceDef<T>","content":"&lt;/&gt; type ServiceDef&lt;T&gt; = T&amp;{ Client: {[any]: any}?, Start: ((any) → any)?, [any]: any } The definition of a service when created using fish.service(name, serviceDef)  "},{"title":"Service<T>​","type":1,"pageTitle":"Types","url":"/fish/api/Types#Service<T>","content":"&lt;/&gt; type Service&lt;T&gt; = T&amp;{ Client: { Server: T, [any]: any }, Start: (any) → any, [any]: any } A service as seen in the server context  "},{"title":"ServiceRef​","type":1,"pageTitle":"Types","url":"/fish/api/Types#ServiceRef","content":"&lt;/&gt; type ServiceRef = {[any]: any} A reference to a service from the client context  "},{"title":"ControllerDef<T>​","type":1,"pageTitle":"Types","url":"/fish/api/Types#ControllerDef<T>","content":"&lt;/&gt; type ControllerDef&lt;T&gt; = T&amp;{ Start: ((any) → any)?, [any]: any } The definition of a controller when created using fish.controller(name, controllerDef)  "},{"title":"Controller<T>​","type":1,"pageTitle":"Types","url":"/fish/api/Types#Controller<T>","content":"&lt;/&gt; type Controller&lt;T&gt; = T&amp;{ Start: (any) → any, [any]: any } A controller as seen in the client context "},{"title":"Client","type":0,"sectionRef":"#","url":"/fish/api/Client","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Client","url":"/fish/api/Client#properties","content":" "},{"title":"ClientService​","type":1,"pageTitle":"Client","url":"/fish/api/Client#ClientService","content":"&lt;/&gt; Client.ClientService: ModuleScript  Reference to the ClientService module which represents a service from the client context "},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/fish/api/Client#functions","content":" "},{"title":"controller​","type":1,"pageTitle":"Client","url":"/fish/api/Client#controller","content":"&lt;/&gt; Client.controller( name: string,-- The name of the controller controllerDef: fish.ControllerDef&lt;T&gt;?-- The definition of the controller ) → fish.Controller&lt;T&gt;-- The controller itself Constructs/gets a controller. If the controller already exists, the existing controller will be returned.  "},{"title":"controllerDeep​","type":1,"pageTitle":"Client","url":"/fish/api/Client#controllerDeep","content":"&lt;/&gt; Client.controllerDeep( folder: Instance -- The instance containing the controller modules ) → () Constructs all controllers out of the modules in the children in the given instance.  "},{"title":"service​","type":1,"pageTitle":"Client","url":"/fish/api/Client#service","content":"&lt;/&gt; Client.service( name: string-- The name of the service ) → fish.ServiceRef?-- The reference to the service Get a service.  "},{"title":"getServices​","type":1,"pageTitle":"Client","url":"/fish/api/Client#getServices","content":"&lt;/&gt; Client.getServices() → {[string]: fish.ServiceRef}-- The list of services indexed by its name Get all public services visible to the client.  "},{"title":"getServiceNames​","type":1,"pageTitle":"Client","url":"/fish/api/Client#getServiceNames","content":"&lt;/&gt; Client.getServiceNames() → {string}-- The list of service names Get all public service names visible to the client.  "},{"title":"start​","type":1,"pageTitle":"Client","url":"/fish/api/Client#start","content":"&lt;/&gt; Client.start() → Promise.TypedPromise&lt;nil&gt;-- Promise that resolves when started Starts all created controllers. Controllers cannot be created after called.  "},{"title":"onStart​","type":1,"pageTitle":"Client","url":"/fish/api/Client#onStart","content":"&lt;/&gt; Client.onStart() → Promise.TypedPromise&lt;nil&gt;-- Promise that resolves when started Returns a promise that is resolved once controllers are started. "}]